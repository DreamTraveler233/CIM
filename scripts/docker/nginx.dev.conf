# 用于本地开发的自包含Nginx配置，代理CIM后端并处理CORS
# 运行方法:
#   nginx -c /absolute/path/to/scripts/docker/nginx.dev.conf
#   nginx -s reload          # 编辑后重新加载
#   nginx -s stop            # 停止
#
# 后端服务:
#   - HTTP API: 127.0.0.1:8080 (来自 bin/config/server.yaml)
#   - WebSocket: 127.0.0.1:8081 (下面的可选配置块)
#
# 前端访问点:
#   - 该Nginx监听9000端口。前端可以调用 http://localhost:9000/api/...
#
# CORS策略:
#   - 反射允许的Origin并启用凭证（对开发友好）
#   - Preflight OPTIONS返回204状态码和所需的Access-Control-*头
#   - 根据需要调整下面的白名单

# ====== 核心配置 ======
error_log  /home/szy/code/CIM/scripts/docker/nginx.error.log  warn;
pid        /home/szy/code/CIM/scripts/docker/nginx.pid;
worker_processes  1;

events {
    # 每个工作进程的最大连接数
    worker_connections  1024;
}

http {
    # MIME类型和基本默认配置
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    keepalive_timeout  65;
    access_log /home/szy/code/CIM/scripts/docker/nginx.access.log;

    # 后端上游服务器
    upstream cim_http_api {
        server 127.0.0.1:8080;
    }
    upstream cim_ws_backend {
        server 127.0.0.1:8081;
    }

    # ---- Origin白名单（开发环境）----
    # 添加/删除您信任的用于本地开发的origin
    map $http_origin $cors_allow_origin {
        default                          "";                # 默认拒绝
        "http://localhost:5173"         $http_origin;      # Vite默认端口
        "http://127.0.0.1:5173"         $http_origin;
        "https://localhost:5173"        $http_origin;      # 如前端为 HTTPS
        "https://127.0.0.1:5173"        $http_origin;
        "http://localhost:3000"         $http_origin;      # CRA/Next.js默认端口
        "http://127.0.0.1:3000"         $http_origin;
        "https://localhost:3000"        $http_origin;
        "https://127.0.0.1:3000"        $http_origin;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 9000;          # 开发代理端口
        server_name localhost;

        # -------- 带CORS的API --------
        location ^~ /api/ 
        {
            # 通过map控制允许的Origin；若不在白名单中则值为空 -> 浏览器阻止
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            # 确保缓存根据Origin变化
            add_header Vary "Origin" always;
            # 允许凭证（cookies等）
            add_header Access-Control-Allow-Credentials "true" always;
            # 允许的请求方法
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;

            # 反射前端携带的请求头，避免因自定义头导致预检失败（为空时提供默认集合）
            set $cors_req_headers $http_access_control_request_headers;
            if ($cors_req_headers = "") { set $cors_req_headers "Content-Type, Authorization, X-Requested-With"; }
            add_header Access-Control-Allow-Headers "$cors_req_headers" always;

            # 可选：暴露常用响应头给浏览器
            add_header Access-Control-Expose-Headers "Authorization, Content-Length, Content-Type" always;
            add_header Access-Control-Max-Age 86400 always;

            # Preflight请求快速处理（确保在返回前已设置好CORS头）
            if ($request_method = OPTIONS) {
                return 204;
            }

            # 确保只有代理添加CORS头（隐藏后端CORS以避免重复）
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Max-Age;

            proxy_pass         http://cim_http_api;
            proxy_http_version 1.1;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        # -------- WebSocket代理（匹配前端路径）--------
        # 前端连接: ws://localhost:9000/wss/default.io?token=...
        location /wss/ {
            proxy_pass http://cim_ws_backend; # 指向 127.0.0.1:8081
            proxy_http_version 1.1;

            # WebSocket 必需头
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;

            # 关闭缓冲，防止帧被缓存/改写
            proxy_buffering off;
            proxy_read_timeout 75s;
            proxy_send_timeout 75s;

            # 转发客户端真实IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 静态占位符或SPA回退（可选）
        location / {
            return 200 'Nginx开发代理正在运行。尝试访问 /api/v1/auth/login';
            add_header Content-Type text/plain;
        }
    }
}